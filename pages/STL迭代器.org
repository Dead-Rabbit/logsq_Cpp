#+TITLE: STL迭代器

** 常用的迭代器按功能强弱分为输入迭代器、输出迭代器、前向迭代器、双向迭代器、随机访问迭代器 5 种
** 前向迭代器
:PROPERTIES:
:id: 6054116b-28b4-46b5-907f-af34319bafc7
:END:
*** 假设 p 是一个前向迭代器，则 p 支持 ++p，p++，*p 操作，还可以被复制或赋值，可以用 == 和 != 运算符进行比较。此外，两个正向迭代器可以互相赋值
** 双向迭代器
:PROPERTIES:
:id: 605411b4-7516-4db2-9659-2cd8f59d81d6
:END:
*** 双向迭代器具有正向迭代器的全部功能，除此之外，假设 p 是一个双向迭代器，则还可以进行 --p 或者 p-- 操作（即一次向后移动一个位置）
** 随机访问迭代器
:PROPERTIES:
:id: 605411b9-45a7-4cfd-9f92-189bb6dbaee5
:END:
*** 随机访问迭代器具有双向迭代器的全部功能。除此之外，假设 p 是一个随机访问迭代器，i 是一个整型变量或常量，则 p 还支持以下操作：
**** p+=i：使得 p 往后移动 i 个元素
**** p-=i：使得 p 往前移动 i 个元素
**** p+i：返回 p 后面第 i 个元素的迭代器
**** p-i：返回 p 前面第 i 个元素的迭代器
**** p[i]：返回 p 后面第 i 个元素的引用
*** 两个随机访问迭代器 p1、p2 还可以用 <、>、<=、>= 运算符进行比较。另外，表达式 p2-p1 也是有定义的，其返回值表示 p2 所指向元素和 p1 所指向元素的序号之差（也可以说是 p2 和 p1 之间的元素个数减一）
** 迭代器的几种定义方式
*** *正向迭代器* - 容器类名::iterator  迭代器名
*** *常量正向迭代器* - 容器类名::const\_iterator  迭代器名
*** *反向迭代器* - 容器类名::reverse\_iterator  迭代器名
*** *常量反向迭代器* - 容器类名::const\_reverse\_iterator  迭代器名
*** 常量迭代器和非常量迭代器的分别在于，通过非常量迭代器还能修改其指向的元素
*** 反向迭代器和正向迭代器的区别在于
**** 对正向迭代器进行++操作时，迭代器会指向容器中的后一个元素
**** 而对反向迭代器进 ++操作时，迭代器会指向容器中的前一个元素
**
