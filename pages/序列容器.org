#+TITLE: 序列容器

** 主要包括[[array容器]]、[[vector向量容器]]、[[list列表容器]]以及 [[deque双端队列容器]]
** 之所以被称为序列容器，是因为元素在容器中的位置同元素的值无关，即容器不是排序的。将元素插入容器时，指定在什么位置，元素就会位于什么位置
** *deque 与 vector的比较*
:PROPERTIES:
:id: 605413ba-72be-40f7-9e0f-f85b21d9f8f1
:END:
*** deque与vector非常相似。它也采用动态数组管理元素，提供随机存取，有着和vector几乎一样的接口
*** 不同的是deque的动态数组头尾都开放，因此能在头尾两端进行快速安插和删除
*** *deque 与 Vector 的主要不同*
**** 不同点：
1. 两端都能快速安插和删除元素，这些操作可以在分期摊还的常数时间（amortized constant time）内完成
2. 元素的存取和迭代器的动作比vector稍慢
3. 迭代器需要在不同区块间跳转，所以它非一般指针
4. 因为deque使用不止一块内存（而vector必须使用一块连续内存），所以deque的max\_size()可能更大
5. 不支持对容量和内存重新分配时机的控制。不过deque的内存重分配优于vector，因为其内部结构显示，deque不必在内存重分配时复制所有元素
6. 除了头尾两端，在任何地方安插或删除元素，都将导致指向deque元素的所有pointers、references、iterators失效
7. deque的内存区块不再被使用时，会自动被释放。deque的内存大小是可自动缩减的
8. deque与vector组织内存的方式不一样。在底层，deque按“页”（page）或“块”（chunk）来分配存储器，每页包含固定数目的元素。而vector只分配一块连续的内存。例如，一个10M字节的vector使用的是一整块10M字节的内存，而deque可以使用一串更小的内存块，比如10块1M的内存。所以不能将deque的地址（如&deque[0]）传递给传统的C API，因为deque内部所使用的内存不一定会连续
*** *deque的下述特性与vector差不多*
**** 1. 在中部安插、删除元素的速度较慢
**** 2. 迭代器属于random access iterator（随机存取迭代器）
*** *优先使用vector，还是deque?*
**** c++标准建议：vector是那种应该在默认情况下使用的序列。如果大多数插入和删除操作发生在序列的头部或尾部时，应该选用deque
** [[https://blog.csdn.net/gogokongyin/article/details/51178378][list、vector和deque的区别]]
**
